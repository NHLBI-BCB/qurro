#!/usr/bin/env python3
# ----------------------------------------------------------------------------
# Copyright (c) 2018--, rankratioviz development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE.txt, distributed with this software.
# ----------------------------------------------------------------------------

import json


def get_plot_jsons(main_js_loc, as_dict=True):
    """Extracts the plot JSONs from a main.js file generated by rankratioviz.

       If either JSON isn't available, raises a ValueError.

       Parameters
       ----------
       main_js_loc: str
          The location of a main.js file, which should contain assignments
          to the rankPlotJSON and samplePlotJSON (local) variables. We make
          the assumption that the third and fourth lines of this file are
          written as follows:

          [optional whitespace]var rankPlotJSON = {1};[optional whitespace]
          [optional whitespace]var samplePlotJSON = {2};[optional whitespace]

          where {1} is the rank plot JSON and {2} is the sample plot JSON.

          This function just extracts {1} and {2} and returns the two JSONs
          as either dicts or strings.

       as_dict: bool
          If True, this will load the JSONs as dicts by calling json.loads().
          If False, this will just return the strings.
    """
    rank_plot_json_str = None
    sample_plot_json_str = None
    with open(main_js_loc, "r") as mf:
        for line in mf:
            # Use strip() to trim off starting and trailing whitespace; use the
            # first position in the slice to ignore the
            # "var [rank/sample]PlotJSON = " stuff; use the second position in
            # the slice (-1) to remove the trailing semicolon
            if line.lstrip().startswith("var rankPlotJSON = "):
                rank_plot_json_str = line.strip()[19:-1]
            elif line.lstrip().startswith("var samplePlotJSON = "):
                sample_plot_json_str = line.strip()[21:-1]
                break
    if rank_plot_json_str is None or sample_plot_json_str is None:
        raise ValueError("Plot JSONs not found in {}.".format(main_js_loc))
    if as_dict:
        return json.loads(rank_plot_json_str), json.loads(sample_plot_json_str)
    else:
        return rank_plot_json_str, sample_plot_json_str


def replace_js_plot_json_definitions(
    input_file_loc, rank_plot_str, sample_plot_str, output_file_loc=None
):
    """Writes a version of the input JS file with plot JSON(s) changed.

       If output_file_loc is None, the input_file_loc will be overwritten.
    """
    # Also note that the lengths of the JS variable names defined here
    # (rankPlotJSON and samplePlotJSON), as well as them being defined on
    # separate lines of the file, are relied on in the python tests when
    # extracting the JSON files from generated main.js files. If you change the
    # way these variables are written to in the JS, it may cause the python
    # tests to fail.
    output_file_contents = ""
    with open(input_file_loc, "r") as input_file_obj:
        # read in basic main.js contents. Replace {}s in definitions of the
        # plot JSONs with the actual JSON.
        for line in input_file_obj:
            output_line = line
            if line.lstrip().startswith("var rankPlotJSON = {"):
                output_line = (
                    output_line[: output_line.index("{")]
                    + rank_plot_str
                    + ";\n"
                )
            elif line.lstrip().startswith("var samplePlotJSON = {"):
                output_line = (
                    output_line[: output_line.index("{")]
                    + sample_plot_str
                    + ";\n"
                )
            output_file_contents += output_line

    if output_file_loc is None:
        output_file_loc = input_file_loc

    with open(output_file_loc, "w") as output_file_obj:
        output_file_obj.write(output_file_contents)


if __name__ == "__main__":
    """Update JSON plot definitions for the rankratioviz web tests."""
#    test_dir = os.path.join("rankratioviz", "tests", "web_tests", "tests")
#    rrv_js_tests = filter(lambda f: f.endswith(".js"), os.listdir(test_dir))
#    rank_plot_str, sample_plot_str = get_plot_jsons(
#        os.path.join(
#            "rankratioviz", "tests", "output", "matching_test", "main.js"
#        ),
#        as_dict=False,
#    )
#    for js_test_file in rrv_js_tests:
#        replace_js_plot_json_definitions(
#            os.path.join(test_dir, js_test_file),
#            rank_plot_str,
#            sample_plot_str,
#        )
